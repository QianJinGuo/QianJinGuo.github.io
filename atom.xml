<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>架构师成长之旅</title>
  
  <subtitle>刻意练习，从新手到领域大牛</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://jinguo.tech/"/>
  <updated>2022-01-13T19:33:41.034Z</updated>
  <id>https://jinguo.tech/</id>
  
  <author>
    <name>Qian JinGuo</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>字节数组妙用</title>
    <link href="https://jinguo.tech/2022/01/14/%E5%AD%97%E8%8A%82%E6%95%B0%E7%BB%84%E5%A6%99%E7%94%A8/"/>
    <id>https://jinguo.tech/2022/01/14/%E5%AD%97%E8%8A%82%E6%95%B0%E7%BB%84%E5%A6%99%E7%94%A8/</id>
    <published>2022-01-13T18:02:14.399Z</published>
    <updated>2022-01-13T19:33:41.034Z</updated>
    
    <content type="html"><![CDATA[<h1 id="字节属于最小单位"><a class="header-anchor" href="#字节属于最小单位"></a>字节属于最小单位</h1><p>例如在Java中，int占用4个字节，long占用8个字节等。基本上所有基本类型(包括String)都可以转换成字节，那么这到底有何作用。<br>在实际开发中，经常会用到本地缓存，或使用<code>Redis</code>或者<code>Memcached</code>来作分布式缓存,Java一般存入缓存中的对象无非是以下几种:</p><ul><li>序列化的Java对象：一个Java对象序列化后所占用的字节是按对象中属性个数，方法个数，以及属性的值决定，最小也需要几百个字节来存储，大的话可能需要几万个字节</li><li>String(可能是json串)：占用字节由字符串的长度决定</li><li>规则的byte[]数组：占用字节由数组长度决定，相比较于String来说，基本类型转换成固定字节的数组，而不是转换成内容长度的String，故字节数组所占用的字节比String更少</li></ul><blockquote><ol><li>在大量的缓存数据(亿级以上)的情况下，为了提高空间利用率，切勿将<strong>Java对象</strong>当做缓存的内容</li><li>字节数组所需空间最少</li></ol></blockquote><h2 id="引用"><a class="header-anchor" href="#引用"></a>引用</h2><p><a href="https://www.jianshu.com/p/665f4dd77f30" target="_blank" rel="noopener">字节数组的妙用</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;字节属于最小单位&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#字节属于最小单位&quot;&gt;&lt;/a&gt;字节属于最小单位&lt;/h1&gt;
&lt;p&gt;例如在Java中，int占用4个字节，long占用8个字节等。基本上所有基本类型(包括String)都可以转换成字节，
      
    
    </summary>
    
    
      <category term="java" scheme="https://jinguo.tech/categories/java/"/>
    
    
      <category term="jdk" scheme="https://jinguo.tech/tags/jdk/"/>
    
  </entry>
  
  <entry>
    <title>线程执行顺序</title>
    <link href="https://jinguo.tech/2022/01/14/%E7%BA%BF%E7%A8%8B%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F/"/>
    <id>https://jinguo.tech/2022/01/14/%E7%BA%BF%E7%A8%8B%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F/</id>
    <published>2022-01-13T18:02:14.387Z</published>
    <updated>2022-01-13T19:27:02.211Z</updated>
    
    <content type="html"><![CDATA[<h2 id="线程执行顺序"><a class="header-anchor" href="#线程执行顺序"></a>线程执行顺序</h2><blockquote><p>jvm为了使得处理器内部的运算单元能尽量被充分利用，处理器可能会对输入代码进行乱序执行（Out-Of-Order Execution）优化，处理器会在计算之后将乱序执行的结果重组，保证该结果与顺序执行的结果是一致的，但并不保证程序中各个语句计算的先后顺序与输入代码中的顺序一致，因此，如果存在一个计算任务依赖另外一个计算任务的中间结果，那么其顺序性并不能靠代码的先后顺序来保证[^1]<br><code>1.《深入理解Java虚拟机：JVM高级特性与最佳实践》 — 周志明</code></p></blockquote><p>如果程序没有正确同步，那么可能会存在数据竞争。JMM对数据竞争的定义如下：</p><blockquote><p>在一个线程中写一个变量，在另一个线程中读取同一个变量，而且写和读没有通过同步来排序</p></blockquote><p>顺序一致性模型有以下<strong>两大特性</strong>：</p><ol><li>一个线程中的所有操作必须按照==程序的顺序==来执行</li><li>（不管程序是否同步）所有线程都只能看到一个单一的操作执行顺序。在顺序一致内存模型中，每一个操作都必须是原子执行且立即对所有线程可见。</li></ol><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">可以把顺序顺序一致模型理解为一个单摆，每一个时刻单摆只能到一个位置，对应过来，任何时刻最多只能有一个线程才能连接到内存。</span><br><span class="line">由于重排序的影响，实际指令的执行顺序是不可知的，但是不管如何排序，每个操作能够立即对其他线程可见，所以所有线程看到的都是一样的执行顺序。</span><br><span class="line">但是在JMM中是没有这个规定的，就是说其他线程看到执行顺序与除自己外的线程看到的执行顺序可能是不一致的。</span><br><span class="line">比如，当前线程把写过的数据缓存缓存到写缓存中，在没有刷新到主内存（计算机系统的DRAM）之前，这个写操作对其他线程是不可见的，意味着其他线程认为该线程根本没有执行写操作。</span><br><span class="line">那么何时才能可见呢？只有在当前线程把写缓存中数据刷新到主内存的时候，对其他内存才是可见的。</span><br></pre></td></tr></table></figure><p><strong>如何控制多线程的执行顺序</strong>？</p><h2 id="引用"><a class="header-anchor" href="#引用"></a>引用</h2><p><a href="https://blog.csdn.net/hello_worldee/article/details/77823426" target="_blank" rel="noopener">多线程-重排序与顺序一致性</a><br>![[并发编程以及锁.pptx]]![[java多线程相关分享.pptx]]</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;线程执行顺序&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#线程执行顺序&quot;&gt;&lt;/a&gt;线程执行顺序&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;jvm为了使得处理器内部的运算单元能尽量被充分利用，处理器可能会对输入代码进行乱序执行（Out-Of-O
      
    
    </summary>
    
    
      <category term="java" scheme="https://jinguo.tech/categories/java/"/>
    
    
      <category term="多线程" scheme="https://jinguo.tech/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="jvm" scheme="https://jinguo.tech/tags/jvm/"/>
    
  </entry>
  
  <entry>
    <title>线程池实现原理</title>
    <link href="https://jinguo.tech/2022/01/14/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/"/>
    <id>https://jinguo.tech/2022/01/14/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</id>
    <published>2022-01-13T18:02:14.382Z</published>
    <updated>2022-01-13T19:26:03.165Z</updated>
    
    <content type="html"><![CDATA[<h2 id="线程池是什么"><a class="header-anchor" href="#线程池是什么"></a>线程池是什么</h2><p>线程池（Thread Pool）是一种基于==池化==思想管理线程的工具，经常出现在多线程服务器中，如MySQL。<br>线程过多会带来额外的开销，其中包括创建销毁线程的开销、调度线程的开销等等，同时也降低了计算机的整体性能。线程池维护多个线程，等待监督管理者分配可并发执行的任务。这种做法，一方面避免了处理任务时创建销毁线程开销的代价，另一方面避免了线程数量膨胀导致的过分调度问题，保证了对内核的充分利用。</p><h2 id="线程池解决的问题是什么"><a class="header-anchor" href="#线程池解决的问题是什么"></a>线程池解决的问题是什么</h2><p>线程池解决的核心问题就是资源管理问题。在并发环境下，系统不能够确定在任意时刻中，有多少任务需要执行，有多少资源需要投入。这种不确定性将带来以下若干问题：</p><ol><li>频繁申请/销毁资源和调度资源，将带来额外的消耗，可能会非常巨大。</li><li>对资源无限申请缺少抑制手段，易引发系统资源耗尽的风险。</li><li>系统无法合理管理内部的资源分布，会降低系统的稳定性。<br>为解决资源分配这个问题，线程池采用了“==池化==”（Pooling）思想。池化，顾名思义，是为了最大化收益并最小化风险，而将资源统一在一起管理的一种思想。</li></ol><blockquote><p>Pooling is the grouping together of resources (assets, equipment, personnel, effort, etc.) for the purposes of maximizing advantage or minimizing risk to the users. The term is used in finance, computing and equipment management.——wikipedia</p></blockquote><p>“池化”思想不仅仅能应用在计算机领域，在金融、设备、人员管理、工作管理等领域也有相关的应用。<br>在计算机领域中的表现为：统一管理IT资源，包括服务器、存储、和网络资源等等。通过共享资源，使用户在低投入中获益。除去线程池，还有其他比较典型的几种使用策略包括：</p><ol><li>内存池(Memory Pooling)：预先申请内存，提升申请内存速度，减少内存碎片。</li><li>连接池(Connection Pooling)：预先申请数据库连接，提升申请连接的速度，降低系统的开销。</li><li>实例池(Object Pooling)：循环使用对象，减少资源在初始化和释放时的昂贵损耗。</li></ol><h2 id="线程池核心设计与实现"><a class="header-anchor" href="#线程池核心设计与实现"></a>线程池核心设计与实现</h2><p>在前文中，我们了解到：线程池是一种通过“池化”思想，帮助我们管理线程而获取并发性的工具，在Java中的体现是ThreadPoolExecutor类。</p><h2 id="线程池在业务中的实践"><a class="header-anchor" href="#线程池在业务中的实践"></a>线程池在业务中的实践</h2><p><strong>场景1：快速响应用户请求</strong><br><strong>场景2：快速处理批量任务</strong></p><h2 id="引用"><a class="header-anchor" href="#引用"></a>引用</h2><p><a href="https://tech.meituan.com/2020/04/02/java-pooling-pratice-in-meituan.html" target="_blank" rel="noopener">Java线程池实现原理及其在美团业务中的实践</a><br><a href="https://www.cnblogs.com/xiaoxi/p/7692250.html" target="_blank" rel="noopener">Java并发编程：线程池的使用</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;线程池是什么&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#线程池是什么&quot;&gt;&lt;/a&gt;线程池是什么&lt;/h2&gt;
&lt;p&gt;线程池（Thread Pool）是一种基于==池化==思想管理线程的工具，经常出现在多线程服务器中，如MySQL。&lt;br&gt;
线程过
      
    
    </summary>
    
    
      <category term="java" scheme="https://jinguo.tech/categories/java/"/>
    
    
      <category term="线程池" scheme="https://jinguo.tech/tags/%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
    
  </entry>
  
  <entry>
    <title>同步注解与并发性标注</title>
    <link href="https://jinguo.tech/2022/01/14/%E5%90%8C%E6%AD%A5%E6%B3%A8%E8%A7%A3%E4%B8%8E%E5%B9%B6%E5%8F%91%E6%80%A7%E6%A0%87%E6%B3%A8/"/>
    <id>https://jinguo.tech/2022/01/14/%E5%90%8C%E6%AD%A5%E6%B3%A8%E8%A7%A3%E4%B8%8E%E5%B9%B6%E5%8F%91%E6%80%A7%E6%A0%87%E6%B3%A8/</id>
    <published>2022-01-13T18:02:14.368Z</published>
    <updated>2022-01-13T19:23:24.654Z</updated>
    
    <content type="html"><![CDATA[<h2 id="同步注解"><a class="header-anchor" href="#同步注解"></a>同步注解</h2><ul><li>@GuardedBy( “this” ) 受对象内部锁保护</li><li>@GuardedBy( “fieldName” ) 受 与fieldName引用相关联的锁保护</li><li>@GuardedBy( “ClassName.fieldName” ) 受一个类的静态field的锁保护。</li><li>@GuardedBy( “methodName()” ) 锁对象是 methodName() 方法的返值，受这个锁保护。</li><li>@GuardedBy( “ClassName.class” ) 受 ClassName类的直接锁对象保护。而不是这个类的某个实例的锁对象。</li></ul><h2 id="并发性标注"><a class="header-anchor" href="#并发性标注"></a>并发性标注</h2><p>@GuardedBy @NotThreadSafe @ThreadSafe<br>这三个类级别的标注可以描述类的线程安全保证性,属于类公开文档的一部分.它只是标注了该类是否是线程安全的,但实际上没法保证线程安全.</p><ul><li>@Immutable<br>表示类是不可变得既是final修饰的,它是线程安全的</li><li>@ThreadSafe<br>类是线程安全的</li><li>@NotThreadSafe<br>类不是线程安全的，如果类未加任何注解，则不能确定是否线程安全，认为是非线程安全的</li></ul><h2 id="引用"><a class="header-anchor" href="#引用"></a>引用</h2><p><a href="https://blog.csdn.net/u010870167/article/details/88059219" target="_blank" rel="noopener">并发性标注</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;同步注解&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#同步注解&quot;&gt;&lt;/a&gt;同步注解&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;@GuardedBy( “this” ) 受对象内部锁保护&lt;/li&gt;
&lt;li&gt;@GuardedBy( “fieldName” ) 
      
    
    </summary>
    
    
      <category term="Spring" scheme="https://jinguo.tech/categories/Spring/"/>
    
    
      <category term="Spring" scheme="https://jinguo.tech/tags/Spring/"/>
    
      <category term="多线程" scheme="https://jinguo.tech/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>关闭线程池</title>
    <link href="https://jinguo.tech/2022/01/14/%E5%85%B3%E9%97%AD%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
    <id>https://jinguo.tech/2022/01/14/%E5%85%B3%E9%97%AD%E7%BA%BF%E7%A8%8B%E6%B1%A0/</id>
    <published>2022-01-13T18:02:14.355Z</published>
    <updated>2022-01-13T19:22:14.083Z</updated>
    
    <content type="html"><![CDATA[<h2 id="dubbo优雅关闭线程池"><a class="header-anchor" href="#dubbo优雅关闭线程池"></a>dubbo优雅关闭线程池</h2><ul><li>shutDown：通知线程池启动有序关闭，执行线程池之前已经提交的任务，但是不再接受新的任务。调用shutDown后再提交任务将会抛出RejectedExecutionException异常。</li><li>shutDownNow：尝试立即停止所有已经提交的任务，并会返回正在等待执行（未执行）的任务列表。shutDownNow通过向线程池中的线程发送一个中断请求而中止线程，如果线程池中运行了会抛出InterruptedException的程序，将会抛出一个InterruptedException。如过这个线程不能响应中断那么可能永远无法被终止。</li><li>isTerminated：所有的任务都被关闭返回true，否则返回false。只有调用了shutDown或者shutDownNow，isTerminated才可能为true。</li><li>awaitTermination(long timeout,TimeUnit unit)throws InterruptedException：阻塞当前线程</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(ExecutorUtil.class);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadPoolExecutor shutdownExecutor = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">0</span>, <span class="number">1</span>,</span><br><span class="line">            <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">            <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;(<span class="number">100</span>),</span><br><span class="line">            <span class="keyword">new</span> NamedThreadFactory(<span class="string">"Close-ExecutorService-Timer"</span>, <span class="keyword">true</span>));</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isTerminated</span><span class="params">(Executor executor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (executor <span class="keyword">instanceof</span> ExecutorService) &#123;</span><br><span class="line">            <span class="keyword">if</span> (((ExecutorService) executor).isTerminated()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Use the shutdown pattern from:</span></span><br><span class="line"><span class="comment">     *  https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/ExecutorService.html</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> executor the Executor to shutdown</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeout the timeout in milliseconds before termination</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">gracefulShutdown</span><span class="params">(Executor executor, <span class="keyword">int</span> timeout)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!(executor <span class="keyword">instanceof</span> ExecutorService) || isTerminated(executor)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">final</span> ExecutorService es = (ExecutorService) executor;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// Disable new tasks from being submitted</span></span><br><span class="line">            es.shutdown();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SecurityException ex2) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NullPointerException ex2) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// Wait a while for existing tasks to terminate</span></span><br><span class="line">            <span class="keyword">if</span> (!es.awaitTermination(timeout, TimeUnit.MILLISECONDS)) &#123;</span><br><span class="line">                es.shutdownNow();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException ex) &#123;</span><br><span class="line">            es.shutdownNow();</span><br><span class="line">            Thread.currentThread().interrupt();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!isTerminated(es)) &#123;</span><br><span class="line">            newThreadToCloseExecutor(es);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">shutdownNow</span><span class="params">(Executor executor, <span class="keyword">final</span> <span class="keyword">int</span> timeout)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!(executor <span class="keyword">instanceof</span> ExecutorService) || isTerminated(executor)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">final</span> ExecutorService es = (ExecutorService) executor;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            es.shutdownNow();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SecurityException ex2) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NullPointerException ex2) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            es.awaitTermination(timeout, TimeUnit.MILLISECONDS);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException ex) &#123;</span><br><span class="line">            Thread.currentThread().interrupt();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!isTerminated(es)) &#123;</span><br><span class="line">            newThreadToCloseExecutor(es);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">newThreadToCloseExecutor</span><span class="params">(<span class="keyword">final</span> ExecutorService es)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!isTerminated(es)) &#123;</span><br><span class="line">            shutdownExecutor.execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">                            es.shutdownNow();</span><br><span class="line">                            <span class="keyword">if</span> (es.awaitTermination(<span class="number">10</span>, TimeUnit.MILLISECONDS)) &#123;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException ex) &#123;</span><br><span class="line">                        Thread.currentThread().interrupt();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">                        logger.warn(e.getMessage(), e);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="引用"><a class="header-anchor" href="#引用"></a>引用</h2><p><a href="https://developer.aliyun.com/article/756816" target="_blank" rel="noopener">学习dubbo如何优雅关闭线程池</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;dubbo优雅关闭线程池&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#dubbo优雅关闭线程池&quot;&gt;&lt;/a&gt;dubbo优雅关闭线程池&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;shutDown：通知线程池启动有序关闭，执行线程池之前已经提交的任务，但是不再接
      
    
    </summary>
    
    
      <category term="java" scheme="https://jinguo.tech/categories/java/"/>
    
    
      <category term="线程池" scheme="https://jinguo.tech/tags/%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
    
  </entry>
  
  <entry>
    <title>Empty List</title>
    <link href="https://jinguo.tech/2022/01/14/%E8%BF%94%E5%9B%9E%E7%A9%BAList%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <id>https://jinguo.tech/2022/01/14/%E8%BF%94%E5%9B%9E%E7%A9%BAList%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</id>
    <published>2022-01-13T18:02:14.349Z</published>
    <updated>2022-01-13T19:20:53.595Z</updated>
    
    <content type="html"><![CDATA[<h2 id="返回空List的方式"><a class="header-anchor" href="#返回空List的方式"></a>返回空List的方式</h2><ol><li><code>new ArrayList()</code></li><li><code>new ArrayList(0)</code></li><li><code>Collections.emptyList()</code></li><li><code>Lists.newArrayList()</code></li></ol><p><a href="https://blog.csdn.net/yangguosb/article/details/84573635" target="_blank" rel="noopener">返回空List的方式</a></p><p>因为返回空集合的替代方法通常是返回null;<br>然后呼叫者必须添加针对NullPointerException的警卫。如果返回空集合，则会减轻错误类别。在Java 8+中，还有一个Optional类型，它可以在没有Collection的情况下实现相同的目的。</p><h2 id="返回null-还是-空集合？-推荐空集合"><a class="header-anchor" href="#返回null-还是-空集合？-推荐空集合"></a>返回null 还是 空集合？ 推荐空集合</h2><p>null ?? []<br><strong>返回null 还是 空对象？</strong><br>如果您打算指示没有可用数据，则返回null通常是最好的主意。<br><strong>空对象表示已返回数据，而返回null则表示未返回任何内容。</strong></p><p>此外，如果尝试访问<strong>对象中的成员</strong>，则返回null将会导致<strong>null异常</strong>，这对于突出显示错误代码很有用-尝试不访问任何成员是没有意义的。访问空对象的成员不会失败，这意味着错误可能会被发现。<br>map类似 Stream 的 map方法。处理完之后，返回的还是一个 Optional 对象，所以可以做链式调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line">String name = Optional.of(user).map(User::getName).orElse(<span class="string">"佚名"</span>);</span><br><span class="line">System.out.println(name);</span><br></pre></td></tr></table></figure><p>如上，取出user对象的name值，若name为空，返回一个默认值“佚名”（神奇的名字）。<br>这里，直接调用map方法，就不需要对user对象进行预先判空了。因为在map方法里边，会调用isPresent方法帮我们处理user为null的情况。<br>到这里，脑袋转圈快的小伙伴，是不是对开头的坑已经有启发了。<br>没错，我们可以通过 <strong>Optional 的链式调用</strong>，通过 map，orElse 等操作改写。如下，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">getUserAddr1</span><span class="params">(Optional&lt;User&gt; user)</span></span>&#123;</span><br><span class="line">    <span class="comment">//先获取address对象</span></span><br><span class="line">    <span class="keyword">return</span> user.map((u)-&gt;u.getAddress())</span><br><span class="line">            <span class="comment">//再获取details值，</span></span><br><span class="line">            .map(e -&gt; e.getDetails())</span><br><span class="line">            <span class="comment">//若detail为null，则返回一个默认值</span></span><br><span class="line">            .orElse(<span class="string">"地址信息未填写"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>备注：<a href="https://segmentfault.com/a/1190000023912618" target="_blank" rel="noopener">JDK8新特性</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;返回空List的方式&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#返回空List的方式&quot;&gt;&lt;/a&gt;返回空List的方式&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;new ArrayList()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;new
      
    
    </summary>
    
    
      <category term="java" scheme="https://jinguo.tech/categories/java/"/>
    
    
      <category term="list" scheme="https://jinguo.tech/tags/list/"/>
    
      <category term="jdk" scheme="https://jinguo.tech/tags/jdk/"/>
    
      <category term="stream" scheme="https://jinguo.tech/tags/stream/"/>
    
  </entry>
  
  <entry>
    <title>测试端口连通性</title>
    <link href="https://jinguo.tech/2022/01/14/%E6%B5%8B%E8%AF%95%E7%AB%AF%E5%8F%A3%E8%BF%9E%E9%80%9A%E6%80%A7/"/>
    <id>https://jinguo.tech/2022/01/14/%E6%B5%8B%E8%AF%95%E7%AB%AF%E5%8F%A3%E8%BF%9E%E9%80%9A%E6%80%A7/</id>
    <published>2022-01-13T18:02:14.342Z</published>
    <updated>2022-01-13T19:19:42.094Z</updated>
    
    <content type="html"><![CDATA[<h2 id="如何测试端口通不通"><a class="header-anchor" href="#如何测试端口通不通"></a>如何测试端口通不通</h2><ul><li><strong>使用telnet判断</strong></li></ul><p><code>telnet ip post</code></p><ul><li><strong>使用ssh判断</strong></li></ul><p><code>ssh -v -p port username@ip</code></p><blockquote><p>-v 调试模式(会打印日志).<br>-p 指定端口</p></blockquote><ul><li><p><strong>使用wget判断</strong><br><code>wget ip:port</code></p></li><li><p><strong>使用端口扫描工具</strong></p></li><li><p><strong>使用专用工具tcping进行访问：</strong></p></li></ul><h2 id="引用"><a class="header-anchor" href="#引用"></a>引用</h2><p><a href="https://blog.csdn.net/swazer_z/article/details/64442730" target="_blank" rel="noopener">如何测试端口通不通</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;如何测试端口通不通&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#如何测试端口通不通&quot;&gt;&lt;/a&gt;如何测试端口通不通&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;使用telnet判断&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;te
      
    
    </summary>
    
    
      <category term="Linux" scheme="https://jinguo.tech/categories/Linux/"/>
    
    
      <category term="CentOS" scheme="https://jinguo.tech/tags/CentOS/"/>
    
  </entry>
  
  <entry>
    <title>stream排序和分页</title>
    <link href="https://jinguo.tech/2022/01/14/Stream%E6%8E%92%E5%BA%8F%E5%92%8C%E5%88%86%E9%A1%B5/"/>
    <id>https://jinguo.tech/2022/01/14/Stream%E6%8E%92%E5%BA%8F%E5%92%8C%E5%88%86%E9%A1%B5/</id>
    <published>2022-01-13T18:02:14.318Z</published>
    <updated>2022-01-13T19:16:42.828Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java-8-stream排序-分页"><a class="header-anchor" href="#Java-8-stream排序-分页"></a>Java 8 stream排序&amp;分页</h2><h3 id="排序"><a class="header-anchor" href="#排序"></a>排序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Student newList = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">10</span>);</span><br><span class="line"><span class="comment">//升序</span></span><br><span class="line">list.stream().sorted((v1,v2)-&gt;v1.getId().compareTo(</span><br><span class="line">v2.getId()</span><br><span class="line">)).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line"><span class="comment">//降序</span></span><br><span class="line">list.stream().sorted((v1,v2)-&gt;v2getId().compareTo(</span><br><span class="line">v1.getId()</span><br><span class="line">)).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据子对象id，升序排序，Student对象中还有一个Boy的对象属性</span></span><br><span class="line">list.stream().sorted((v1,v2)-&gt;v1.getBoy().getbId().compareTo(</span><br><span class="line">v2.getBoy().getbId()</span><br><span class="line">)).collect(Collectors.toList());</span><br></pre></td></tr></table></figure><h3 id="分页"><a class="header-anchor" href="#分页"></a>分页</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.stream().skip((currentPage-<span class="number">1</span>)*pageSize).limit(pageSize).collect(Collectors.toList());</span><br></pre></td></tr></table></figure><h3 id="在项目中的运用："><a class="header-anchor" href="#在项目中的运用："></a>在项目中的运用：</h3><pre><code class="language-java">long totalPage = resultList.size() / request.getPageSize() + (resultList.size() % request.getPageSize() &gt; 0 ? 1 : 0);Pagination pagination = new Pagination(request.getCurrent().longValue(), request.getPageSize().longValue(),(long) resultList.size(), totalPage);//通过stream对返回结果进行分页List&lt;MarketingTaskEntity&gt; paginationResults = resultList.stream().skip((request.getCurrent() - 1) * request.getPageSize()).limit(request.getPageSize()).collect(Collectors.toList());</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Java-8-stream排序-分页&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#Java-8-stream排序-分页&quot;&gt;&lt;/a&gt;Java 8 stream排序&amp;amp;分页&lt;/h2&gt;
&lt;h3 id=&quot;排序&quot;&gt;&lt;a class=&quot;header
      
    
    </summary>
    
    
      <category term="java" scheme="https://jinguo.tech/categories/java/"/>
    
    
      <category term="stream" scheme="https://jinguo.tech/tags/stream/"/>
    
  </entry>
  
  <entry>
    <title>SQL Where妙用</title>
    <link href="https://jinguo.tech/2022/01/14/SQL%20Where%E5%A6%99%E7%94%A8/"/>
    <id>https://jinguo.tech/2022/01/14/SQL%20Where%E5%A6%99%E7%94%A8/</id>
    <published>2022-01-13T18:02:14.312Z</published>
    <updated>2022-01-13T19:14:43.860Z</updated>
    
    <content type="html"><![CDATA[<h2 id="深入理解SQL中where-1-1的用处"><a class="header-anchor" href="#深入理解SQL中where-1-1的用处"></a>深入理解SQL中where 1=1的用处</h2><ol><li><p>where 的条件为永真<br>SQL注入时:<br><code>DELETE FROM table_a WHERE name= '张三'</code><br><code>DELETE FROM table_a WHERE name= '张三' or 1=1</code><br>本来是删除ａ值为张三的这一条数据，这就又变成了无约束的删除了。<br>1=1 永真， 1&lt;&gt;1 永假。</p></li><li><p>在后台写不定数量的查询条件下，便于规范语句，增加灵活性<code>String sql = &quot;select * from table a&quot;;</code></p></li></ol><p><strong>在不使用where 1=1的情况下</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(params.containsKey(<span class="string">"name"</span>))&#123;</span><br><span class="line">    String key = params.get(<span class="string">"name"</span>).toString();</span><br><span class="line">    sql+=<span class="string">"where a.name='"</span>+key +<span class="string">"'"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(params.containsKey(<span class="string">"age"</span>))&#123;</span><br><span class="line">    String key = params.get(<span class="string">"age"</span>).toString();</span><br><span class="line">    sql+=<span class="string">"where a.age='"</span>+key +<span class="string">"'"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(params.containsKey(<span class="string">"class "</span>))&#123;</span><br><span class="line">    String key = params.get(<span class="string">"class "</span>).toString();</span><br><span class="line">    sql+=<span class="string">"where a.class ='"</span>+key +<span class="string">"'"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>当时用</strong>where 1=1** 的时候**<br><code>String sql = &quot;select * from table a where 1=1&quot;;</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(params.containsKey(<span class="string">"name"</span>))&#123;</span><br><span class="line">    String key = params.get(<span class="string">"name"</span>).toString();</span><br><span class="line">    sql+=<span class="string">" and a.name='"</span>+key +<span class="string">"'"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(params.containsKey(<span class="string">"age"</span>))&#123;</span><br><span class="line">    String key = params.get(<span class="string">"age"</span>).toString();</span><br><span class="line">    sql+=<span class="string">" and a.age='"</span>+key +<span class="string">"'"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(params.containsKey(<span class="string">"class "</span>))&#123;</span><br><span class="line">    String key = params.get(<span class="string">"class "</span>).toString();</span><br><span class="line">    sql+=<span class="string">" and a.class ='"</span>+key +<span class="string">"'"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Mybatis-where-1-1-和-where标签"><a class="header-anchor" href="#Mybatis-where-1-1-和-where标签"></a>Mybatis where 1=1 和 where标签</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selSampleListByIDX4"</span> <span class="attr">resultMap</span>=<span class="string">"BaseResultMap"</span> <span class="attr">parameterType</span>=<span class="string">"cn.com.git.cbs.datamodel.TBL_Sample"</span>&gt;</span></span><br><span class="line"> select </span><br><span class="line"> <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"Base_Column_List"</span> /&gt;</span></span><br><span class="line"> from SAMPLE</span><br><span class="line"> where 1=1   </span><br><span class="line">   <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"samplenumber != null"</span> &gt;</span></span><br><span class="line">     AND SAMPLENUMBER = #&#123;samplenumber,jdbcType=DECIMAL&#125;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Mybatis  之前拼条件的时候 写法  where 1=1，也可以使where标签</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findActiveBlogLike"</span> <span class="attr">resultType</span>=<span class="string">"Blog"</span>&gt;</span></span><br><span class="line">  SELECT * FROM BLOG </span><br><span class="line">  <span class="tag">&lt;<span class="name">where</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"state != null"</span>&gt;</span></span><br><span class="line">         state = #&#123;state&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"title != null"</span>&gt;</span></span><br><span class="line">        AND title like #&#123;title&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"author != null and author.name != null"</span>&gt;</span></span><br><span class="line">        AND author_name like #&#123;author.name&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>where 元素知道只有在一个以上的if条件有值的情况下才去插入“WHERE”子句。而且，若最后的内容是“AND”或“OR”开头的，where 元素也知道如何将他们去除。</li><li>如果 where 元素没有按正常套路出牌，我们还是可以通过自定义 trim 元素来定制我们想要的功能。比如，和 where 元素等价的自定义 trim 元素为：<br><code>&lt;trim prefix=&quot;WHERE&quot; prefixOverrides=&quot;AND |OR &quot;&gt; ... &lt;/trim&gt;</code></li></ul><h2 id="参考"><a class="header-anchor" href="#参考"></a>参考</h2><p><a href="https://blog.csdn.net/idomyway/article/details/78903822" target="_blank" rel="noopener">深入理解SQL中where 1=1的用处</a><br><a href="https://blog.csdn.net/qq_23994787/article/details/79045768" target="_blank" rel="noopener">where 1=1有什么用</a><br><a href="https://blog.csdn.net/xiaxiaorui2003/article/details/53301540" target="_blank" rel="noopener">where 1=1 和 where标签</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;深入理解SQL中where-1-1的用处&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#深入理解SQL中where-1-1的用处&quot;&gt;&lt;/a&gt;深入理解SQL中where 1=1的用处&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;where 的条件为永真&lt;
      
    
    </summary>
    
    
      <category term="SQL" scheme="https://jinguo.tech/categories/SQL/"/>
    
    
      <category term="SQL" scheme="https://jinguo.tech/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot参数校验</title>
    <link href="https://jinguo.tech/2022/01/14/SpringBoot%E5%8F%82%E6%95%B0%E6%A0%A1%E9%AA%8C/"/>
    <id>https://jinguo.tech/2022/01/14/SpringBoot%E5%8F%82%E6%95%B0%E6%A0%A1%E9%AA%8C/</id>
    <published>2022-01-13T18:02:14.299Z</published>
    <updated>2022-01-13T19:13:48.928Z</updated>
    
    <content type="html"><![CDATA[<h2 id="参数校验"><a class="header-anchor" href="#参数校验"></a>参数校验</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@ResponseBody</span></span><br><span class="line"> <span class="meta">@ExceptionHandler</span>(MethodArgumentNotValidException.class)</span><br><span class="line"> <span class="function"><span class="keyword">public</span> BaseResponse <span class="title">argValidException</span><span class="params">(HttpServletResponse response, MethodArgumentNotValidException ex)</span> </span>&#123;</span><br><span class="line">        logger.error(<span class="string">"参数校验异常："</span>, ex);</span><br><span class="line">        StringBuilder builder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">if</span> (ex.getBindingResult().hasErrors()) &#123;</span><br><span class="line">            ex.getBindingResult().getFieldErrors().forEach(err-&gt;&#123;</span><br><span class="line">                builder.append(err.getDefaultMessage()).append(<span class="string">"\n"</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> BaseResponse.fail(builder.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@RequestMapping</span>(value = <span class="string">"/apply/collection"</span>, method = &#123;RequestMethod.POST&#125;)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BaseResponse <span class="title">applyCollectionPermission</span><span class="params">(@Valid @RequestBody ApplyCollectionPermissionRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> success = metabaseService.applyCollection(request);</span><br><span class="line">        <span class="keyword">return</span> success ? BaseResponse.success(<span class="string">"已提交申请，等待审批。"</span>) : BaseResponse.fail(<span class="string">"操作失败，请重试"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplyCollectionPermissionRequest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@NotBlank</span>(message = <span class="string">"申请理由不能为空"</span>)</span><br><span class="line">    String reason;</span><br><span class="line">    List&lt;MBCollection&gt; collections;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="引用"><a class="header-anchor" href="#引用"></a>引用</h2><p><a href="https://www.cnblogs.com/mr-yang-localhost/p/7812038.html" target="_blank" rel="noopener">springboot使用hibernate validator</a><br><a href="https://juejin.cn/post/6844903974257049608" target="_blank" rel="noopener">@valid和@validated</a><br><a href="https://my.oschina.net/u/3706132/blog/1557940" target="_blank" rel="noopener">分组校验</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;参数校验&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#参数校验&quot;&gt;&lt;/a&gt;参数校验&lt;/h2&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span cl
      
    
    </summary>
    
    
      <category term="Spring" scheme="https://jinguo.tech/categories/Spring/"/>
    
    
      <category term="SpringBoot" scheme="https://jinguo.tech/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>Redis锁</title>
    <link href="https://jinguo.tech/2022/01/14/Redis%E9%94%81/"/>
    <id>https://jinguo.tech/2022/01/14/Redis%E9%94%81/</id>
    <published>2022-01-13T18:02:14.285Z</published>
    <updated>2022-01-13T19:10:44.055Z</updated>
    
    <content type="html"><![CDATA[<h2 id="项目应用"><a class="header-anchor" href="#项目应用"></a>项目应用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果不存在(为空)就set值，并返回1；如果存在(不为空)不进行操作，并返回0</span></span><br><span class="line">Boolean success = stringRedisTemplate.opsForValue().setIfAbsent(lockKey, String.valueOf(System.currentTimeMillis()), seconds, TimeUnit.SECONDS);</span><br><span class="line"><span class="keyword">return</span> success != <span class="keyword">null</span> &amp;&amp; success;</span><br></pre></td></tr></table></figure><h2 id="引用"><a class="header-anchor" href="#引用"></a>引用</h2><p><a href="https://xie.infoq.cn/article/556aaceb68789b9de4807f1c2" target="_blank" rel="noopener">Redis分布式锁原理</a><br><a href="https://juejin.cn/post/6901484610031452174" target="_blank" rel="noopener">Redis实现分布式锁</a><br><a href="https://blog.csdn.net/amosjob/article/details/99681707" target="_blank" rel="noopener">企业级分布式锁</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;项目应用&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#项目应用&quot;&gt;&lt;/a&gt;项目应用&lt;/h2&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span cl
      
    
    </summary>
    
    
      <category term="缓存" scheme="https://jinguo.tech/categories/%E7%BC%93%E5%AD%98/"/>
    
    
      <category term="redis" scheme="https://jinguo.tech/tags/redis/"/>
    
      <category term="分布式锁" scheme="https://jinguo.tech/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
    
  </entry>
  
  <entry>
    <title>Presto引擎</title>
    <link href="https://jinguo.tech/2022/01/14/Presto%E5%BC%95%E6%93%8E/"/>
    <id>https://jinguo.tech/2022/01/14/Presto%E5%BC%95%E6%93%8E/</id>
    <published>2022-01-13T18:02:14.279Z</published>
    <updated>2022-01-13T19:06:51.061Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Presto数据模型"><a class="header-anchor" href="#Presto数据模型"></a>Presto数据模型</h2><p>Presto使用Catalog、Schema和Table这3层结构来管理数据。</p><blockquote><p>** Catalog**:就是数据源。Hive是数据源，Mysql也是数据源，Hive 和Mysql都是数据源类型，可以连接多个Hive和多个Mysql，每个连接都有一个名字。一个Catalog可以包含多个Schema，大家可以通过show catalogs 命令看到Presto连接的所有数据源。<br>** Schema**：相当于一个数据库实例，一个Schema包含多张数据表。show schemas from 'catalog_name’可列出catalog_name下的所有schema。<br><strong>Table</strong>：数据表，与一般意义上的数据库表相同。show tables from 'catalog_name.schema_name’可查看’catalog_name.schema_name’下的所有表。</p></blockquote><blockquote><p>在Presto中定位一张表，一般是catalog为根，例如：一张表的全称为 hive.test_data.test，标识 hive(catalog)下的 test_data(schema)中test表。可以简理解为：数据源的大类.数据库.数据表。</p></blockquote><h2 id="引用"><a class="header-anchor" href="#引用"></a>引用</h2><p><a href="http://blog.chinaunix.net/uid-31012107-id-5819785.html" target="_blank" rel="noopener">Presto入门介绍</a><br><a href="https://www.alibabacloud.com/help/zh/doc-detail/166150.htm" target="_blank" rel="noopener">Presto数据源</a><br><a href="https://cloud.tencent.com/developer/article/1630733" target="_blank" rel="noopener">Presto查询引擎及原理分析</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Presto数据模型&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#Presto数据模型&quot;&gt;&lt;/a&gt;Presto数据模型&lt;/h2&gt;
&lt;p&gt;Presto使用Catalog、Schema和Table这3层结构来管理数据。&lt;/p&gt;
&lt;blockquo
      
    
    </summary>
    
    
      <category term="大数据" scheme="https://jinguo.tech/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="presto" scheme="https://jinguo.tech/tags/presto/"/>
    
  </entry>
  
  <entry>
    <title>MySQL执行计划</title>
    <link href="https://jinguo.tech/2022/01/14/MySQL%E6%89%A7%E8%A1%8C%E8%AE%A1%E5%88%92/"/>
    <id>https://jinguo.tech/2022/01/14/MySQL%E6%89%A7%E8%A1%8C%E8%AE%A1%E5%88%92/</id>
    <published>2022-01-13T18:02:14.266Z</published>
    <updated>2022-01-13T19:04:22.652Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Explain-用途"><a class="header-anchor" href="#Explain-用途"></a><code>Explain</code> 用途</h2><ol><li>表的读取顺序如何</li><li>数据读取操作有哪些操作类型</li><li>哪些索引可以使用</li><li>哪些索引被实际使用</li><li>表之间是如何引用</li><li>每张表有多少行被优化器查询</li></ol><h2 id="Explain语法"><a class="header-anchor" href="#Explain语法"></a><code>Explain</code>语法</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span></span><br></pre></td></tr></table></figure><h2 id="引用"><a class="header-anchor" href="#引用"></a>引用</h2><p><a href="https://blog.csdn.net/Dreamhai/article/details/104558854" target="_blank" rel="noopener">MySQL查询优化之explain 执行计划</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Explain-用途&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#Explain-用途&quot;&gt;&lt;/a&gt;&lt;code&gt;Explain&lt;/code&gt; 用途&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;表的读取顺序如何&lt;/li&gt;
&lt;li&gt;数据读取操作有哪些操作类型&lt;/l
      
    
    </summary>
    
    
      <category term="数据库" scheme="https://jinguo.tech/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="mysql" scheme="https://jinguo.tech/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis转义字符</title>
    <link href="https://jinguo.tech/2022/01/14/Mybatis%E8%BD%AC%E4%B9%89%E5%AD%97%E7%AC%A6/"/>
    <id>https://jinguo.tech/2022/01/14/Mybatis%E8%BD%AC%E4%B9%89%E5%AD%97%E7%AC%A6/</id>
    <published>2022-01-13T18:02:14.252Z</published>
    <updated>2022-01-13T19:04:09.744Z</updated>
    
    <content type="html"><![CDATA[<h2 id="转义字符"><a class="header-anchor" href="#转义字符"></a>转义字符</h2><table><thead><tr><th>字符</th><th>转义</th><th>描述</th></tr></thead><tbody><tr><td>&lt;</td><td><code>&amp;lt;</code></td><td>小于</td></tr><tr><td>&lt;=</td><td><code>&amp;lt;=</code></td><td>小于等于</td></tr><tr><td>&gt;</td><td><code>&amp;gt;</code></td><td>大于</td></tr><tr><td>&gt;=</td><td><code>&amp;gt;=</code></td><td>大于等于</td></tr><tr><td>&lt;&gt;</td><td><code>&amp;lt;&amp;gt;</code></td><td>不等于</td></tr><tr><td>&amp;</td><td><code>&amp;amp;</code></td><td></td></tr><tr><td>’</td><td><code>&amp;apos</code></td><td></td></tr><tr><td>‘’</td><td><code>&amp;qots</code></td><td></td></tr></tbody></table><p>此外，也可以用CDATA标志<br><code>&lt;![CDATA[ 这里写你的sql ]]&gt;</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;转义字符&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#转义字符&quot;&gt;&lt;/a&gt;转义字符&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;字符&lt;/th&gt;
&lt;th&gt;转义&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;t
      
    
    </summary>
    
    
      <category term="ORM" scheme="https://jinguo.tech/categories/ORM/"/>
    
    
      <category term="mybatis" scheme="https://jinguo.tech/tags/mybatis/"/>
    
  </entry>
  
  <entry>
    <title>List按照对象属性去重</title>
    <link href="https://jinguo.tech/2022/01/14/List%E6%8C%89%E7%85%A7%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7%E5%8E%BB%E9%87%8D/"/>
    <id>https://jinguo.tech/2022/01/14/List%E6%8C%89%E7%85%A7%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7%E5%8E%BB%E9%87%8D/</id>
    <published>2022-01-13T18:02:14.239Z</published>
    <updated>2022-01-13T19:18:33.426Z</updated>
    
    <content type="html"><![CDATA[<h2 id="通过stream去重"><a class="header-anchor" href="#通过stream去重"></a>通过stream去重</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List <span class="title">getFileDetailList</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (CollectionUtils.isNotEmpty(fileDetailList)) &#123;</span><br><span class="line"><span class="keyword">return</span> fileDetailList.stream().filter(distinctByKey(SecurityResource::getName)).collect(Collectors.toList());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">Predicate&lt;T&gt; <span class="title">distinctByKey</span><span class="params">(Function&lt;? <span class="keyword">super</span> T, Object&gt; keyExtractor)</span> </span>&#123;</span><br><span class="line">    Map&lt;Object, Boolean&gt; seen = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;(<span class="number">2</span> &gt;&gt; <span class="number">4</span>);</span><br><span class="line">    <span class="keyword">return</span> t -&gt; seen.putIfAbsent(keyExtractor.apply(t), Boolean.TRUE) == <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;通过stream去重&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#通过stream去重&quot;&gt;&lt;/a&gt;通过stream去重&lt;/h2&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gut
      
    
    </summary>
    
    
      <category term="java" scheme="https://jinguo.tech/categories/java/"/>
    
    
      <category term="list" scheme="https://jinguo.tech/tags/list/"/>
    
      <category term="jdk" scheme="https://jinguo.tech/tags/jdk/"/>
    
      <category term="stream" scheme="https://jinguo.tech/tags/stream/"/>
    
  </entry>
  
  <entry>
    <title>JS基础语法</title>
    <link href="https://jinguo.tech/2022/01/14/JS%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    <id>https://jinguo.tech/2022/01/14/JS%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</id>
    <published>2022-01-13T18:02:14.233Z</published>
    <updated>2022-01-13T19:03:49.435Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Javascript中-的含义"><a class="header-anchor" href="#Javascript中-的含义"></a>Javascript中!!的含义</h2><p>Javascript中!!(两个感叹号，双感叹号)可以用来做什么，可以做出如下判断：</p><ul><li>数值：表示不是0，且有确定含义的值（包括无穷大）</li><li>字符串：表示长度大于0的字符串</li><li>数组，对象，函数：只能表示不是undefined或null,并不能判断是否有元素和内容。<br><code>if(!!arr &amp;&amp; arr.length&gt;0)</code></li></ul><h2 id="js判断为空Null与字符串为空简写方法"><a class="header-anchor" href="#js判断为空Null与字符串为空简写方法"></a>js判断为空Null与字符串为空简写方法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (variable1 !== <span class="literal">null</span> || variable1 !== <span class="literal">undefined</span> || variable1 !== <span class="string">''</span>) &#123; </span><br><span class="line">  <span class="keyword">var</span> variable2 = variable1; </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>上面的意思是说如果variable1不是一个空对象，或者未定义，或者不等于空字符串，那么声明一个variable2变量，将variable1赋给variable2。也就是说如果variable1存在那么就将variable1的值赋给variable2，若不存在则为空字符串。如下面的简写代码。<br><code>var variable2 = variable1 || '';</code><br>判断字符串是否为空：<br><code>str.length==0</code><br>如果用户输入的是空格，制表符，换页符呢?这样的话，是不为空的<br>可以用正则表达式来判断<br><code>str.replace(/(^s*)|(s*$)/g, &quot;&quot;).length ==0</code><br>或者<br><code>str.replace(/(^\s*)|(\s*$)/g, &quot;&quot;)) != &quot;&quot;</code></p><h2 id="引用"><a class="header-anchor" href="#引用"></a>引用</h2><p><a href="https://www.cnblogs.com/daysme/p/6979231.html" target="_blank" rel="noopener">js判空</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Javascript中-的含义&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#Javascript中-的含义&quot;&gt;&lt;/a&gt;Javascript中!!的含义&lt;/h2&gt;
&lt;p&gt;Javascript中!!(两个感叹号，双感叹号)可以用来做什么，可以做出
      
    
    </summary>
    
    
      <category term="前端" scheme="https://jinguo.tech/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="javascript" scheme="https://jinguo.tech/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>JSON序列化</title>
    <link href="https://jinguo.tech/2022/01/14/json%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>https://jinguo.tech/2022/01/14/json%E5%BA%8F%E5%88%97%E5%8C%96/</id>
    <published>2022-01-13T18:02:14.226Z</published>
    <updated>2022-01-13T19:03:36.588Z</updated>
    
    <content type="html"><![CDATA[<h2 id="属性序列化"><a class="header-anchor" href="#属性序列化"></a>属性序列化</h2><h3 id="一、jackson的-JsonProperty使用"><a class="header-anchor" href="#一、jackson的-JsonProperty使用"></a>一、jackson的@JsonProperty使用</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>@JsonProperty 此注解用于属性上，作用是把该属性的名称序列化为另外一个名称，如把trueName属性序列化为name，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JsonProperty</span>(value=<span class="string">"name"</span>)。</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="meta">@JsonProperty</span>(<span class="string">"screen_name"</span>)</span><br><span class="line"><span class="keyword">private</span> String screen;</span><br></pre></td></tr></table></figure><h3 id="二、fastjson的-JSONField使用"><a class="header-anchor" href="#二、fastjson的-JSONField使用"></a>二、fastjson的@JSONField使用</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.28<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JSONField</span>(name=<span class="string">"screen_name"</span>)</span><br><span class="line"><span class="keyword">private</span> String screen;</span><br></pre></td></tr></table></figure><h2 id="忽略属性"><a class="header-anchor" href="#忽略属性"></a>忽略属性</h2><h3 id="一、jackson的JsonIgnore"><a class="header-anchor" href="#一、jackson的JsonIgnore"></a>一、jackson的JsonIgnore</h3><ol><li>作用：在json序列化时将java bean中的一些属性忽略掉，序列化和反序列化都受影响。</li><li>使用方法：一般标记在属性或者方法上，返回的json数据即不包含该属性。</li></ol><h3 id="二、fastjson的-JSONField-serialize-false"><a class="header-anchor" href="#二、fastjson的-JSONField-serialize-false"></a>二、fastjson的@JSONField(serialize = false)</h3><h2 id="日期格式化"><a class="header-anchor" href="#日期格式化"></a>日期格式化</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DateTimeFormat</span>(pattern = <span class="string">"yyyy-MM-dd HH:mm:ss"</span>)  </span><br><span class="line"><span class="meta">@JsonFormat</span>(shape = JsonFormat.Shape.STRING, pattern = <span class="string">"yyyy-MM-dd HH:mm:ss"</span>, timezone = <span class="string">"GMT+8"</span>)</span><br><span class="line"><span class="keyword">private</span> LocalDateTime startTime;</span><br></pre></td></tr></table></figure><p>@DatetimeFormat<br>org.springframework.format.annotation.DateTimeFormat<br>是将String转换成LocalDateTime，一般前台给后台传值时用</p><p>@JsonFormat：com.fasterxml.jackson.annotation.JsonFormat<br>将LocalDateTime转换成String  一般后台传值给前台时用</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;属性序列化&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#属性序列化&quot;&gt;&lt;/a&gt;属性序列化&lt;/h2&gt;
&lt;h3 id=&quot;一、jackson的-JsonProperty使用&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#一、ja
      
    
    </summary>
    
    
      <category term="Spring" scheme="https://jinguo.tech/categories/Spring/"/>
    
    
      <category term="json" scheme="https://jinguo.tech/tags/json/"/>
    
  </entry>
  
  <entry>
    <title>Joiner简化用分隔符连接字符串序列</title>
    <link href="https://jinguo.tech/2022/01/14/Guava%E4%B9%8BJoiner/"/>
    <id>https://jinguo.tech/2022/01/14/Guava%E4%B9%8BJoiner/</id>
    <published>2022-01-13T18:02:14.214Z</published>
    <updated>2022-01-13T19:03:13.069Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Joiner-简化用分隔符连接字符串序列"><a class="header-anchor" href="#Joiner-简化用分隔符连接字符串序列"></a><code>Joiner</code> 简化用分隔符连接字符串序列</h2><ul><li>如果序列中包含 <code>null</code> 值，那么可以使用 <code>Joiner</code> 跳过 <code>null</code> 值：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 跳过 null 值</span></span><br><span class="line">result = Joiner.on(<span class="string">"; "</span>).skipNulls().join(<span class="string">"Harry"</span>, <span class="keyword">null</span>, <span class="string">"Ron"</span>, <span class="string">"Hermione"</span>);</span><br><span class="line">Assert.assertEquals(result, <span class="string">"Harry; Ron; Hermione"</span>);</span><br></pre></td></tr></table></figure><ul><li>也可以通过 <code>useForNull(String)</code> 来将 <code>null</code> 值替换为指定的字符串。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 替换 null 值</span></span><br><span class="line">result = Joiner.on(<span class="string">"; "</span>).useForNull(<span class="string">"null"</span>).join(<span class="string">"Harry"</span>, <span class="keyword">null</span>, <span class="string">"Ron"</span>, <span class="string">"Hermione"</span>);</span><br><span class="line">Assert.assertEquals(result, <span class="string">"Harry; null; Ron; Hermione"</span>);</span><br></pre></td></tr></table></figure><ul><li>同样可以在对象上使用 <code>Joiner</code>,最终会调用对象的 <code>toString()</code> 方法。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用在对象上，会调用对象的 toString() 函数</span></span><br><span class="line">result = Joiner.on(<span class="string">","</span>).join(Arrays.asList(<span class="number">1</span>, <span class="number">5</span>, <span class="number">7</span>));</span><br><span class="line">Assert.assertEquals(result, <span class="string">"1,5,7"</span>);</span><br></pre></td></tr></table></figure><ul><li>对于 <code>Map</code> ,可以使用这样的代码：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MapJoiner 的使用，将 map 转换为字符串</span></span><br><span class="line">Map map = ImmutableMap.of(<span class="string">"k1"</span>, <span class="string">"v1"</span>, <span class="string">"k2"</span>, <span class="string">"v2"</span>);</span><br><span class="line">result = Joiner.on(<span class="string">"; "</span>).withKeyValueSeparator(<span class="string">"="</span>).join(map);</span><br><span class="line">Assert.assertEquals(result, <span class="string">"k1=v1; k2=v2"</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Joiner-简化用分隔符连接字符串序列&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#Joiner-简化用分隔符连接字符串序列&quot;&gt;&lt;/a&gt;&lt;code&gt;Joiner&lt;/code&gt; 简化用分隔符连接字符串序列&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;如果序列
      
    
    </summary>
    
    
      <category term="java" scheme="https://jinguo.tech/categories/java/"/>
    
    
      <category term="guava" scheme="https://jinguo.tech/tags/guava/"/>
    
      <category term="字符串" scheme="https://jinguo.tech/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>Guava中本地缓存LoadingCache使用</title>
    <link href="https://jinguo.tech/2022/01/14/Guava%E4%B8%AD%E6%9C%AC%E5%9C%B0%E7%BC%93%E5%AD%98LoadingCache%E4%BD%BF%E7%94%A8/"/>
    <id>https://jinguo.tech/2022/01/14/Guava%E4%B8%AD%E6%9C%AC%E5%9C%B0%E7%BC%93%E5%AD%98LoadingCache%E4%BD%BF%E7%94%A8/</id>
    <published>2022-01-13T18:02:14.207Z</published>
    <updated>2022-01-13T19:00:53.725Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Guava-Cache"><a class="header-anchor" href="#Guava-Cache"></a>Guava Cache</h2><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">`Cache`</span> 在实际场景中有着非常广泛的使用，通常情况下如果遇到需要大量时间计算或者获取值的场景，</span><br><span class="line">就应当将值保存到缓存中。<span class="code">`Cache`</span> 和 <span class="code">`ConcurrentMap`</span> 类似，但又不尽相同。</span><br><span class="line">最大的不同是 <span class="code">`ConcurrentMap`</span> 会永久的存储所有的元素值直到他们被显示的移除，</span><br><span class="line">但是 <span class="code">`Cache`</span> 会为了保持内存使用合理，而配置自动将一些值移除。</span><br></pre></td></tr></table></figure><p>通常情况下，Guava Cache 适用于以下场景：</p><ul><li>花费一些内存来换取速度</li><li>一些 key 会被不止一次被调用</li><li>缓存内容有限，不会超过内存空间的值，Guava Cache 不会存储内容到文件或者到服务器外部，如果有此类需求考虑使用 Memcached, Redis 等类似工具<br>先来看一下 Guava 中 Cache 接口的定义：</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">com</span><span class="selector-class">.google</span><span class="selector-class">.common</span><span class="selector-class">.cache</span><span class="selector-class">.Cache</span></span><br><span class="line"><span class="selector-tag">com</span><span class="selector-class">.google</span><span class="selector-class">.common</span><span class="selector-class">.cache</span><span class="selector-class">.Cache</span><span class="selector-id">#asMap</span></span><br><span class="line"><span class="selector-tag">com</span><span class="selector-class">.google</span><span class="selector-class">.common</span><span class="selector-class">.cache</span><span class="selector-class">.Cache</span><span class="selector-id">#cleanUp</span></span><br><span class="line"><span class="selector-tag">com</span><span class="selector-class">.google</span><span class="selector-class">.common</span><span class="selector-class">.cache</span><span class="selector-class">.Cache</span><span class="selector-id">#get</span></span><br><span class="line"><span class="selector-tag">com</span><span class="selector-class">.google</span><span class="selector-class">.common</span><span class="selector-class">.cache</span><span class="selector-class">.Cache</span><span class="selector-id">#getAllPresent</span></span><br><span class="line"><span class="selector-tag">com</span><span class="selector-class">.google</span><span class="selector-class">.common</span><span class="selector-class">.cache</span><span class="selector-class">.Cache</span><span class="selector-id">#getIfPresent</span></span><br><span class="line"><span class="selector-tag">com</span><span class="selector-class">.google</span><span class="selector-class">.common</span><span class="selector-class">.cache</span><span class="selector-class">.Cache</span><span class="selector-id">#invalidate</span></span><br><span class="line"><span class="selector-tag">com</span><span class="selector-class">.google</span><span class="selector-class">.common</span><span class="selector-class">.cache</span><span class="selector-class">.Cache</span><span class="selector-id">#invalidateAll</span>()</span><br><span class="line"><span class="selector-tag">com</span><span class="selector-class">.google</span><span class="selector-class">.common</span><span class="selector-class">.cache</span><span class="selector-class">.Cache</span><span class="selector-id">#invalidateAll</span>(<span class="selector-tag">java</span><span class="selector-class">.lang</span><span class="selector-class">.Iterable</span>&lt;?&gt;)</span><br><span class="line"><span class="selector-tag">com</span><span class="selector-class">.google</span><span class="selector-class">.common</span><span class="selector-class">.cache</span><span class="selector-class">.Cache</span><span class="selector-id">#put</span></span><br><span class="line"><span class="selector-tag">com</span><span class="selector-class">.google</span><span class="selector-class">.common</span><span class="selector-class">.cache</span><span class="selector-class">.Cache</span><span class="selector-id">#putAll</span></span><br><span class="line"><span class="selector-tag">com</span><span class="selector-class">.google</span><span class="selector-class">.common</span><span class="selector-class">.cache</span><span class="selector-class">.Cache</span><span class="selector-id">#size</span></span><br><span class="line"><span class="selector-tag">com</span><span class="selector-class">.google</span><span class="selector-class">.common</span><span class="selector-class">.cache</span><span class="selector-class">.Cache</span><span class="selector-id">#stats</span></span><br></pre></td></tr></table></figure><p>Cache 接口定义的方法大都一目了然，值得一说的就是 <code>stats()</code> 方法，这个方法会返回一个 <code>CacheStats</code> 对象，这个对象包括了该 Cache 的一些统计信息，包括 <code>hitCount</code>， <code>missCount</code>，<code>loadSuccessCount</code>，<code>loadExceptionCount</code>，<code>totalLoadTime</code> 和 <code>evictionCount</code>。<br><code>Cache</code> 通过 <code>CacheBuilder</code> 类的 Builder 模式获取：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">LoadingCache&lt;Key, Graph&gt; graphs = CacheBuilder.newBuilder()</span><br><span class="line">       .maximumSize(<span class="number">1000</span>)</span><br><span class="line">       .expireAfterWrite(<span class="number">10</span>, TimeUnit.MINUTES)</span><br><span class="line">       .removalListener(MY_LISTENER)</span><br><span class="line">       .build(</span><br><span class="line">           <span class="keyword">new</span> CacheLoader&lt;Key, Graph&gt;() &#123;</span><br><span class="line">             <span class="function"><span class="keyword">public</span> Graph <span class="title">load</span><span class="params">(Key key)</span> <span class="keyword">throws</span> AnyException </span>&#123;</span><br><span class="line">               <span class="keyword">return</span> createExpensiveGraph(key);</span><br><span class="line">             &#125;</span><br><span class="line">           &#125;);</span><br></pre></td></tr></table></figure><p>如果使用的场景中对应着 key 的值有默认的值，那么可以选择使用 <code>CacheLoader</code>，如果没有默认值，那么仍然可以原子的 <code>get-if-absent-compute</code> 方法，在 <code>get</code> 方法中提供一个 <code>Callable</code>，或者元素也可以通过 <code>Cache.put</code> 来直接插入到缓存中。</p><h2 id="LoadingCache"><a class="header-anchor" href="#LoadingCache"></a>LoadingCache</h2><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">`LoadingCache`</span> 是一个附加着 <span class="code">`CacheLoader`</span> 的 Cache。</span><br><span class="line"><span class="code">`LoadingCache&lt;K,V&gt;`</span> 在 Guava 中是一个 interface，</span><br><span class="line">通常是用来本地 Cache 缓存 k-v 数据，value 会一直保存在内存中直到被移除或者失效。</span><br><span class="line">实现这个接口的类期望是线程安全的，能够安全的在多线程程序中被访问。</span><br></pre></td></tr></table></figure><h3 id="LoadingCache-不能-Cache-null"><a class="header-anchor" href="#LoadingCache-不能-Cache-null"></a>LoadingCache 不能 Cache null</h3><p>LoadingCache 是不支持缓存 null 值的，如果 load 回调方法返回 null，则在 get 的时候会抛出异常。<br>如果在 CacheLoader 中抛出异常，那么 Cache 会认为没有完成，所以新的值不会被 Cache。基于这一条规则，那么如何避免在 CacheLoader 中因为缓存 null 而抛出异常，那就是编程者自己处理 null 异常</p><h3 id="get-vs-getUnchecked"><a class="header-anchor" href="#get-vs-getUnchecked"></a>get() vs getUnchecked()</h3><p>最正统的查询 <code>LoadingCache</code> 的方法是调用 <code>get(k)</code> 方法，这个方法如果查询到已经缓存的值会立即返回，否则使用缓存的 <code>CacheLoader</code> 自动加载一个新值到缓存并返回。因为 <code>CacheLoader</code> 可能会抛出异常，那么如果有异常，则<code>LoadingCache.get(k)</code> 会抛出 <code>ExecutionException</code> 异常。而如果 CacheLoader 抛出 unchecked 未检查的异常，则 <code>get(k)</code> 方法会抛出 <code>UncheckedExecutionException</code> 异常。<br>此时可以选择使用 <code>getUnchecked(k)</code> 方法，这个方法会将所有的异常包装在 UncheckedExecutionException 异常中。需要注意的是，如果 CacheLoader 声明了检查异常，也就是 CacheLoader 显式的定义了异常，就不能调用 <code>getUnchecked(k)</code> 方法</p><h3 id="定时回收"><a class="header-anchor" href="#定时回收"></a>定时回收</h3><p>CacheBuilder 在构建 Cache 时提供了两种定时回收的方法</p><ul><li>expireAfterAccess(long, TimeUnit) : 缓存项在给定时间内没有被读或写访问，则回收</li><li>expireAfterWrite(long, TimeUnit)：缓存项在给定时间内没有被写访问（创建或覆盖），则回收</li></ul><h3 id="失效"><a class="header-anchor" href="#失效"></a>失效</h3><p>调用 LoadingCache 的 <code>invalidate</code> 方法可以使得 key 失效</p><h2 id="引用"><a class="header-anchor" href="#引用"></a>引用</h2><p><a href="https://github.com/google/guava/wiki/CachesExplained" target="_blank" rel="noopener">guava wiki</a><br><a href="https://www.jianshu.com/p/2d3d30015915" target="_blank" rel="noopener">微服务缓存之Guava Cache</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Guava-Cache&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#Guava-Cache&quot;&gt;&lt;/a&gt;Guava Cache&lt;/h2&gt;
&lt;figure class=&quot;highlight md&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gu
      
    
    </summary>
    
    
      <category term="缓存" scheme="https://jinguo.tech/categories/%E7%BC%93%E5%AD%98/"/>
    
    
      <category term="guava" scheme="https://jinguo.tech/tags/guava/"/>
    
      <category term="缓存" scheme="https://jinguo.tech/tags/%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>Hive实战</title>
    <link href="https://jinguo.tech/2020/12/28/Hive%20%E5%AE%9E%E6%93%8D/"/>
    <id>https://jinguo.tech/2020/12/28/Hive%20%E5%AE%9E%E6%93%8D/</id>
    <published>2020-12-28T14:45:32.387Z</published>
    <updated>2022-01-13T19:03:24.827Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、Database"><a class="header-anchor" href="#一、Database"></a>一、Database</h2><h3 id="1-1-查看数据库列表"><a class="header-anchor" href="#1-1-查看数据库列表"></a>1.1 查看数据库列表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">databases</span>;</span><br></pre></td></tr></table></figure><p><img src="https://img.jinguo.tech/typora/image-20200902204156290.png?imageslim" alt="image-20200902204156290"></p><h3 id="1-2-查看数据库列表"><a class="header-anchor" href="#1-2-查看数据库列表"></a>1.2 查看数据库列表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> database_name;</span><br></pre></td></tr></table></figure><p><img src="https://img.jinguo.tech/typora/image-20200902204350677.png?imageslim" alt="image-20200902204350677"></p><h3 id="1-3-新建数据库"><a class="header-anchor" href="#1-3-新建数据库"></a>1.3 新建数据库</h3><ul><li><p>语法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> (<span class="keyword">DATABASE</span>|<span class="keyword">SCHEMA</span>) [<span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] database_name   <span class="comment">--DATABASE|SCHEMA 是等价的</span></span><br><span class="line">  [<span class="keyword">COMMENT</span> database_comment] <span class="comment">--数据库注释</span></span><br><span class="line">  [LOCATION hdfs_path] <span class="comment">--存储在 HDFS 上的位置</span></span><br><span class="line">  [<span class="keyword">WITH</span> DBPROPERTIES (property_name=property_value, ...)]; <span class="comment">--指定额外属性</span></span><br></pre></td></tr></table></figure></li><li><p>示例</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> hive_test</span><br><span class="line">  <span class="keyword">COMMENT</span> <span class="string">'hive database for test'</span></span><br><span class="line">  <span class="keyword">WITH</span> DBPROPERTIES (<span class="string">'create'</span>=<span class="string">'jinguo'</span>);</span><br></pre></td></tr></table></figure><p><img src="https://img.jinguo.tech/typora/image-20200902203705654.png?imageslim" alt="image-20200902203705654"></p></li></ul><h3 id="1-4-查看数据库信息"><a class="header-anchor" href="#1-4-查看数据库信息"></a>1.4 查看数据库信息</h3><ul><li>语法：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DESC DATABASE [EXTENDED] db_name; <span class="comment">--EXTENDED 表示是否显示额外属性</span></span><br></pre></td></tr></table></figure><ul><li>示例：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DESC DATABASE  EXTENDED hive_test;</span><br></pre></td></tr></table></figure><p><img src="https://img.jinguo.tech/typora/image-20200903100904811.png?imageslim" alt="image-20200903100904811"></p><h3 id="1-5-删除数据库"><a class="header-anchor" href="#1-5-删除数据库"></a>1.5 删除数据库</h3><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> (<span class="keyword">DATABASE</span>|<span class="keyword">SCHEMA</span>) [<span class="keyword">IF</span> <span class="keyword">EXISTS</span>] database_name [RESTRICT|<span class="keyword">CASCADE</span>];</span><br></pre></td></tr></table></figure><p><em>默认行为是 <strong>RESTRICT</strong>，如果数据库中存在表则删除失败。要想删除库及其中的表，可以使用 <strong>CASCADE</strong> 级联删除。</em></p><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">DATABASE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> hive_test;</span><br></pre></td></tr></table></figure><p><img src="https://img.jinguo.tech/typora/image-20200903111952592.png?imageslim" alt="image-20200903111952592"></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error <span class="keyword">while</span> processing statement: FAILED: Execution Error, <span class="keyword">return</span> code <span class="number">1</span> from org<span class="variable">.apache</span><span class="variable">.hadoop</span><span class="variable">.hive</span><span class="variable">.ql</span><span class="variable">.exec</span><span class="variable">.DDLTask</span>. InvalidOperationException(message:Database hive_test is <span class="keyword">not</span> empty. One <span class="keyword">or</span> more tables exist.)</span><br></pre></td></tr></table></figure><p><em>当数据库中存在表的时候，删除时需要用<strong>CASCADE</strong></em>关键字</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">DATABASE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> hive_test <span class="keyword">CASCADE</span>;</span><br></pre></td></tr></table></figure><p><img src="https://img.jinguo.tech/typora/image-20200903112539723.png?imageslim" alt="image-20200903112539723"></p><h2 id="二、创建表"><a class="header-anchor" href="#二、创建表"></a>二、创建表</h2><h3 id="2-1-建表语法"><a class="header-anchor" href="#2-1-建表语法"></a>2.1 建表语法</h3><ul><li>语法</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> [<span class="keyword">TEMPORARY</span>] [<span class="keyword">EXTERNAL</span>] <span class="keyword">TABLE</span> [<span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] [db_name.]table_name     <span class="comment">--表名</span></span><br><span class="line">  [(col_name data_type [<span class="keyword">COMMENT</span> col_comment],</span><br><span class="line">    ... [constraint_specification])]  <span class="comment">--列名 列数据类型</span></span><br><span class="line">  [<span class="keyword">COMMENT</span> table_comment]   <span class="comment">--表描述</span></span><br><span class="line">  [PARTITIONED <span class="keyword">BY</span> (col_name data_type [<span class="keyword">COMMENT</span> col_comment], ...)]  <span class="comment">--分区表分区规则</span></span><br><span class="line">  [</span><br><span class="line">    CLUSTERED <span class="keyword">BY</span> (col_name, col_name, ...) </span><br><span class="line">   [SORTED <span class="keyword">BY</span> (col_name [<span class="keyword">ASC</span>|<span class="keyword">DESC</span>], ...)] <span class="keyword">INTO</span> num_buckets BUCKETS</span><br><span class="line">  ]  <span class="comment">--分桶表分桶规则</span></span><br><span class="line">  [SKEWED <span class="keyword">BY</span> (col_name, col_name, ...) <span class="keyword">ON</span> ((col_value, col_value, ...), (col_value, col_value, ...), ...)  </span><br><span class="line">   [<span class="keyword">STORED</span> <span class="keyword">AS</span> DIRECTORIES] </span><br><span class="line">  ]  <span class="comment">--指定倾斜列和值</span></span><br><span class="line">  [</span><br><span class="line">   [<span class="keyword">ROW</span> <span class="keyword">FORMAT</span> row_format]    </span><br><span class="line">   [<span class="keyword">STORED</span> <span class="keyword">AS</span> file_format]</span><br><span class="line">     | <span class="keyword">STORED</span> <span class="keyword">BY</span> <span class="string">'storage.handler.class.name'</span> [<span class="keyword">WITH</span> SERDEPROPERTIES (...)]  </span><br><span class="line">  ]  <span class="comment">-- 指定行分隔符、存储文件格式或采用自定义存储格式</span></span><br><span class="line">  [LOCATION hdfs_path]  <span class="comment">-- 指定表的存储位置</span></span><br><span class="line">  [TBLPROPERTIES (property_name=property_value, ...)]  <span class="comment">--指定表的属性</span></span><br><span class="line">  [<span class="keyword">AS</span> select_statement];   <span class="comment">--从查询结果创建表</span></span><br></pre></td></tr></table></figure><h3 id="2-2-创建内部表"><a class="header-anchor" href="#2-2-创建内部表"></a>2.2 创建内部表</h3><ul><li>示例</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> emp(</span><br><span class="line">   empno <span class="built_in">INT</span>,</span><br><span class="line">   ename <span class="keyword">STRING</span>,</span><br><span class="line">   job <span class="keyword">STRING</span>,</span><br><span class="line">   mgr <span class="built_in">INT</span>,</span><br><span class="line">   hiredate <span class="built_in">TIMESTAMP</span>,</span><br><span class="line">   sal <span class="built_in">DECIMAL</span>(<span class="number">7</span>,<span class="number">2</span>),</span><br><span class="line">   comm <span class="built_in">DECIMAL</span>(<span class="number">7</span>,<span class="number">2</span>),</span><br><span class="line">   deptno <span class="built_in">INT</span>)</span><br><span class="line">   <span class="keyword">ROW</span> <span class="keyword">FORMAT</span> <span class="keyword">DELIMITED</span> <span class="keyword">FIELDS</span> <span class="keyword">TERMINATED</span> <span class="keyword">BY</span> <span class="string">"\t"</span>;</span><br></pre></td></tr></table></figure><p><img src="https://img.jinguo.tech/typora/image-20200903180953529.png?imageslim" alt="image-20200903180953529"></p><h3 id="2-3-创建外部表"><a class="header-anchor" href="#2-3-创建外部表"></a>2.3 创建外部表</h3><ul><li>示例</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">EXTERNAL</span> <span class="keyword">TABLE</span> emp_external(</span><br><span class="line">   empno <span class="built_in">INT</span>,</span><br><span class="line">   ename <span class="keyword">STRING</span>,</span><br><span class="line">   job <span class="keyword">STRING</span>,</span><br><span class="line">   mgr <span class="built_in">INT</span>,</span><br><span class="line">   hiredate <span class="built_in">TIMESTAMP</span>,</span><br><span class="line">   sal <span class="built_in">DECIMAL</span>(<span class="number">7</span>,<span class="number">2</span>),</span><br><span class="line">   comm <span class="built_in">DECIMAL</span>(<span class="number">7</span>,<span class="number">2</span>),</span><br><span class="line">   deptno <span class="built_in">INT</span>)</span><br><span class="line">   <span class="keyword">ROW</span> <span class="keyword">FORMAT</span> <span class="keyword">DELIMITED</span> <span class="keyword">FIELDS</span> <span class="keyword">TERMINATED</span> <span class="keyword">BY</span> <span class="string">"\t"</span></span><br><span class="line">   LOCATION <span class="string">'/hive/emp_external'</span>;</span><br></pre></td></tr></table></figure><p><img src="https://img.jinguo.tech/typora/image-20200903181743473.png?imageslim" alt="image-20200903181743473"></p><p><em>用<strong>DESC TABLENAME</strong>查看表格信息</em></p><p><img src="https://img.jinguo.tech/typora/image-20200903184628794.png?imageslim" alt="image-20200903184628794"></p><p><em>用<strong>DESC FORMATTED TABLENAME</strong>命令可以查看表的详细信息</em></p><p><img src="https://img.jinguo.tech/typora/image-20200903190348379.png?imageslim" alt="image-20200903190348379"></p><p><em>通过<strong>hdfs dfs -ls</strong>命令可以看到Location的外部表已经存在</em></p><p><img src="https://img.jinguo.tech/typora/image-20200903185141700.png?imageslim" alt="image-20200903185141700"></p><h3 id="2-4-内部表和外部表区别"><a class="header-anchor" href="#2-4-内部表和外部表区别"></a>2.4 内部表和外部表区别</h3><p><strong>创建表时</strong></p><ul><li>创建内部表：会将数据移动到数据仓库指向的路径；</li><li>创建外部表：仅记录数据所在的路径， 不对数据的位置做任何改变。</li></ul><p><strong>删除表时</strong></p><ul><li>内部表的元数据和数据会被一起删除</li><li>外部表只删除元数据，不删除数据。外部表相对来说更加安全，数据组织更加灵活，方便共享源数据。</li></ul><p><strong>总结：</strong></p><ol><li><p>未被external修饰的是内部表【<em>managed table</em>】，被external修饰的为外部表【<em>external table</em>】。</p></li><li><p>内部表数据由Hive自身管理，外部表数据由HDFS管理。</p></li><li><p>内部表数据存储在<em>hive.metastore.warehouse.dir</em>【默认:<em>/user/hive/warehouse</em>】，外部表数据存储位置由用户自己决定。如 <em>location ‘/hive/emp_external’</em></p><p><img src="https://img.jinguo.tech/typora/image-20200904222601364.png?imageslim" alt="image-20200904222601364"></p><p><img src="https://img.jinguo.tech/typora/image-20200904222820733.png?imageslim" alt="image-20200904222820733"></p></li><li><p>删除内部表会直接删除元数据【<em>metadata</em>】及<strong>存储数据</strong>，删除外部表仅仅删除元数据，<em>HDFS</em>上的文件不会被删除。</p></li><li><p>对内部表的修改会直接同步到元数据，而对外部表的表结构和分区进行修改，则需要修改【<em>MSCK REPAIR TABLE table_name</em>】。</p></li></ol><h3 id="2-5-创建分区表"><a class="header-anchor" href="#2-5-创建分区表"></a>2.5 创建分区表</h3><ul><li>示例</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">EXTERNAL</span> <span class="keyword">TABLE</span> emp_partition(</span><br><span class="line">   empno <span class="built_in">INT</span>,</span><br><span class="line">   ename <span class="keyword">STRING</span>,</span><br><span class="line">   job <span class="keyword">STRING</span>,</span><br><span class="line">   mgr <span class="built_in">INT</span>,</span><br><span class="line">   hiredate <span class="built_in">TIMESTAMP</span>,</span><br><span class="line">   sal <span class="built_in">DECIMAL</span>(<span class="number">7</span>,<span class="number">2</span>),</span><br><span class="line">   comm <span class="built_in">DECIMAL</span>(<span class="number">7</span>,<span class="number">2</span>)</span><br><span class="line">   )</span><br><span class="line">   PARTITIONED <span class="keyword">BY</span> (deptno <span class="built_in">INT</span>)  <span class="comment">-- 按照部门编号进行分区</span></span><br><span class="line">   <span class="keyword">ROW</span> <span class="keyword">FORMAT</span> <span class="keyword">DELIMITED</span> <span class="keyword">FIELDS</span> <span class="keyword">TERMINATED</span> <span class="keyword">BY</span> <span class="string">"\t"</span></span><br><span class="line">   LOCATION <span class="string">'/hive/emp_partition'</span>;</span><br></pre></td></tr></table></figure><p><img src="https://img.jinguo.tech/typora/image-20200903191518107.png?imageslim" alt="image-20200903191518107"></p><p><em>用<strong>DESC TABLENAME</strong>查看表格信息</em></p><p><img src="https://img.jinguo.tech/typora/image-20200903193011185.png?imageslim" alt="image-20200903193011185"></p><p><em>用<strong>DESC FORMATTED TABLENAME</strong>命令可以查看表的详细信息</em></p><p><img src="https://img.jinguo.tech/typora/image-20200903192022966.png?imageslim" alt="image-20200903192022966"></p><p><em>通过<strong>hdfs dfs -ls</strong>命令可以看到Location的外部表已经存在</em></p><p><img src="https://img.jinguo.tech/typora/image-20200903191648232.png?imageslim" alt="image-20200903191648232"></p><h3 id="2-6-分桶表"><a class="header-anchor" href="#2-6-分桶表"></a>2.6 分桶表</h3><ul><li>示例</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">EXTERNAL</span> <span class="keyword">TABLE</span> emp_bucket(</span><br><span class="line">   empno <span class="built_in">INT</span>,</span><br><span class="line">   ename <span class="keyword">STRING</span>,</span><br><span class="line">   job <span class="keyword">STRING</span>,</span><br><span class="line">   mgr <span class="built_in">INT</span>,</span><br><span class="line">   hiredate <span class="built_in">TIMESTAMP</span>,</span><br><span class="line">   sal <span class="built_in">DECIMAL</span>(<span class="number">7</span>,<span class="number">2</span>),</span><br><span class="line">   comm <span class="built_in">DECIMAL</span>(<span class="number">7</span>,<span class="number">2</span>),</span><br><span class="line">   deptno <span class="built_in">INT</span>)</span><br><span class="line">   CLUSTERED <span class="keyword">BY</span>(empno) SORTED <span class="keyword">BY</span>(empno <span class="keyword">ASC</span>) <span class="keyword">INTO</span> <span class="number">4</span> BUCKETS  <span class="comment">--按照员工编号散列到四个 bucket 中</span></span><br><span class="line">   <span class="keyword">ROW</span> <span class="keyword">FORMAT</span> <span class="keyword">DELIMITED</span> <span class="keyword">FIELDS</span> <span class="keyword">TERMINATED</span> <span class="keyword">BY</span> <span class="string">"\t"</span></span><br><span class="line">   LOCATION <span class="string">'/hive/emp_bucket'</span>;</span><br></pre></td></tr></table></figure><p><img src="https://img.jinguo.tech/typora/image-20200903192305213.png?imageslim" alt="image-20200903192305213"></p><p><em>用<strong>DESC TABLENAME</strong>查看表格信息</em></p><p><img src="https://img.jinguo.tech/typora/image-20200903192644607.png?imageslim" alt="image-20200903192644607"></p><p><em>用<strong>DESC FORMATTED TABLENAME</strong>命令可以查看表的详细信息</em><img src="https://img.jinguo.tech/typora/image-20200903192505630.png?imageslim" alt="image-20200903192505630"></p><p><em>通过<strong>hdfs dfs -ls</strong>命令可以看到Location的外部表已经存在</em></p><p><img src="https://img.jinguo.tech/typora/image-20200903192829644.png?imageslim" alt="image-20200903192829644"></p><h3 id="2-7-倾斜表"><a class="header-anchor" href="#2-7-倾斜表"></a>2.7 倾斜表</h3><p><em>通过指定一个或者多个列经常出现的值（严重偏斜），<strong>Hive</strong>会自动将涉及到这些值的数据拆分为单独的文件。在查询时，如果涉及到倾斜值，它就直接从独立文件中获取数据，而不是扫描所有文件，这使得性能得到提升</em></p><ul><li>示例</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">EXTERNAL</span> <span class="keyword">TABLE</span> emp_skewed(</span><br><span class="line">   empno <span class="built_in">INT</span>,</span><br><span class="line">   ename <span class="keyword">STRING</span>,</span><br><span class="line">   job <span class="keyword">STRING</span>,</span><br><span class="line">   mgr <span class="built_in">INT</span>,</span><br><span class="line">   hiredate <span class="built_in">TIMESTAMP</span>,</span><br><span class="line">   sal <span class="built_in">DECIMAL</span>(<span class="number">7</span>,<span class="number">2</span>),</span><br><span class="line">   comm <span class="built_in">DECIMAL</span>(<span class="number">7</span>,<span class="number">2</span>)</span><br><span class="line">   )</span><br><span class="line">   SKEWED <span class="keyword">BY</span> (empno) <span class="keyword">ON</span> (<span class="number">66</span>,<span class="number">88</span>,<span class="number">100</span>)  <span class="comment">--指定 empno 的倾斜值 66,88,100</span></span><br><span class="line">   <span class="keyword">ROW</span> <span class="keyword">FORMAT</span> <span class="keyword">DELIMITED</span> <span class="keyword">FIELDS</span> <span class="keyword">TERMINATED</span> <span class="keyword">BY</span> <span class="string">"\t"</span></span><br><span class="line">   LOCATION <span class="string">'/hive/emp_skewed'</span>;</span><br></pre></td></tr></table></figure><p><img src="https://img.jinguo.tech/typora/image-20200903193642678.png?imageslim" alt="image-20200903193642678"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、Database&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#一、Database&quot;&gt;&lt;/a&gt;一、Database&lt;/h2&gt;
&lt;h3 id=&quot;1-1-查看数据库列表&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#1-1
      
    
    </summary>
    
    
      <category term="大数据" scheme="https://jinguo.tech/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="Hive" scheme="https://jinguo.tech/tags/Hive/"/>
    
  </entry>
  
</feed>
